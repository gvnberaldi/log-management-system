name: CI/CD Pipeline

on:
  push:
    branches:
      - Split-CI/CD-pipeline

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: syslog
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
        # Wait for the service to be ready
        options: --health-cmd="pg_isready -U postgres"

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

    - name: Run Unit Tests with Coverage
      run: |
        coverage run -m pytest tests/unit
        coverage report
        coverage html -d coverage_html  # Generate HTML report
        coverage xml -o coverage.xml  # Generate XML report

    - name: Run Integration Tests with Coverage
      run: |
        coverage run -m pytest tests/integration
        coverage report
        coverage html -d coverage_html_integration
        coverage xml -o coverage_integration.xml

    - name: Enforce Minimum Coverage Threshold
      run: |
        coverage run -m pytest tests
        coverage report --fail-under=80  # Adjust the threshold as needed
        coverage xml -o coverage.xml

    - name: Extract version from setup.py
      id: get_version
      run: echo "VERSION=$(python setup.py --version)" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build the Docker image
      run: docker build . -t syslog_manager:${{ env.VERSION }}

    - name: Save Docker image as a TAR file
      run: docker save syslog_manager:${{ env.VERSION }} -o syslog_manager.tar

    - name: Build the Python package
      run: |
        python setup.py sdist bdist_wheel

    - name: Install the package from the wheel
      run: |
        pip install ./dist/*.whl

    - name: Load Docker image from TAR file
      run: docker load -i syslog_manager.tar

    - name: Run Docker Acceptance tests
      run: docker run --rm --network host syslog_manager:${{ env.VERSION }} pytest tests/acceptance

    - name: Run python Package Acceptance Tests
      run: |
        pytest tests/acceptance

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      run: |
        docker tag syslog_manager:${{ env.VERSION }} ${{ secrets.DOCKER_USERNAME }}/syslog_manager:${{ env.VERSION }}
        docker push ${{ secrets.DOCKER_USERNAME }}/syslog_manager:${{ env.VERSION }}

    - name: Check if tag exists
      id: check-tag
      uses: mukunku/tag-exists-action@v1.6.0
      with:
        tag: 'v${{ env.VERSION }}'  # Replace with actual version tag

    - name: Create GitHub Release
      if: success() && steps.check-tag.outputs.exists == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ env.VERSION }}"
        release_name: "v${{ env.VERSION }} Release"
        draft: false
        prerelease: false

    - name: Upload Docker TAR to GitHub Release
      if: success() && steps.check-tag.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: syslog_manager.tar
        asset_name: syslog_manager_v${{ env.VERSION }}.tar
        asset_content_type: application/x-tar

    - name: Upload whl to GitHub Release
      if: success() && steps.check-tag.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/syslog_manager-${{ env.VERSION }}-py3-none-any.whl
        asset_name: syslog_manager-${{ env.VERSION }}-py3-none-any.whl
        asset_content_type: application/octet-stream

    - name: Publish whl to PyPi
      if: success()
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python -m pip install --upgrade twine
        twine upload --skip-existing ./dist/*